import{B as z}from"./Button-BjaLCak2.js";import{S as s,T as e}from"./const-CDvcHHnW.js";import"./jsx-runtime-D_zvdyIk.js";import"./Icon-UUnYs5kp.js";import"./index-D4lIrffr.js";const M={title:"Base Components/Button",component:z,tags:["autodocs"],argTypes:{children:{control:"text",description:"Il contenuto interno del pulsante."},className:{control:"text",description:"Classi CSS aggiuntive per personalizzare lo stile."},debugMode:{control:"boolean",description:"Se `true`, mostra nel log della console le propriet√† passate al componente."},disabled:{control:"boolean",description:"Se `true`, disabilita il pulsante."},iconLeft:{control:"text",description:"Nome dell'icona da posizionare a sinistra del testo."},iconRight:{control:"text",description:"Nome dell'icona da posizionare a destra del testo."},iconLeftType:{control:"text",description:"Tipo del componente Icon - Icon Left."},iconRightType:{control:"text",description:"Tipo del componente Icon - Icon Right."},id:{control:"text",description:"Identificativo univoco per il pulsante."},isLoading:{control:"boolean",description:"Se `true`, mostra il testo di caricamento."},loadingText:{control:"text",description:"Testo da mostrare durante il caricamento."},onClick:{action:"clicked",description:"Gestore dell'evento `onClick`."},theme:{control:"select",options:[e.PRIMARY,e.SECONDARY,e.TERTIARY],description:"Imposta lo stile del pulsante."},size:{control:"select",options:[s.L,s.M,s.S],description:"Imposta la dimensione del pulsante."},tag:{control:"select",options:["a","button"],description:"Imposta il tag HTML del pulsante."},underline:{control:"boolean",description:"Imposta l'underline sul bottone"},uppercase:{control:"boolean",description:"Imposta l'uppercase sul testo del bottone"},status:{control:"select",options:["success","warning","danger","info"],description:"Imposta lo stato del pulsante."}},parameters:{docs:{description:{component:"\nIl componente **Button** rappresenta un pulsante cliccabile con diverse varianti e stili.\n\n## ‚ôøÔ∏è Accessibilit√†\n- Il componente √® un tag `button` a livello html oppure un tag `a`\n- La prop `aria-disabled` prende in automatico il valore `true` o `false` della prop `disabled`\n\n## üìå Esempio\n```jsx\n<Button onClick={(event) => { console.log(event) }}>Button</Button>\n```\n\n## üîß Propriet√†\n- **children** *(ReactNode, richiesto. Se non presente, il componente richiede richiede un' `aria-label` e un'`iconLeft` o `iconRight`)*: Il contenuto del pulsante (testo o elementi React).\n- **className** *(string, opzionale)*: Classi CSS personalizzate.\n- **debugMode** *(boolean, opzionale)*: Se `true`, stampa i log delle propriet√† in console.\n- **disabled** *(boolean, opzionale)*: Se `true`, disabilita il pulsante e automaticamente associa il valore\nall'attributo `aria-disabled`.\n- **iconLeft** *(string, opzionale)*: Renderizza a sinistra dei children il componente `Icon`\nche potete trovare documentato [qui](?path=/docs/foundations-icons--docs). <br>Questa prop si riferisce alla prop `IconName` \ndel componente [`Icon`](?path=/docs/foundations-icons--docs).\n- **iconRight** *(string, opzionale)*: Renderizza a destra dei children il componente `Icon`\nche potete trovare documentato [qui](?path=/docs/foundations-icons--docs). <br>Questa prop si riferisce alla prop `IconName` \ndel componente [`Icon`](?path=/docs/foundations-icons--docs).\n- **iconLeftType** *(string, opzionale)*: Tipo di stile del componente Icon. \n- **iconRightType** *(string, opzionale)*:  Tipo di stile del componente Icon. \n- **id** *(string, opzionale)*: Identificativo univoco.\n- **isLoading** *(boolean, opzionale)*: Se `true`, mostra il testo di caricamento.\n- **loadingText** *(string, opzionale)*: Testo da mostrare durante il caricamento.\n- **onClick** *(function, opzionale)*: Evento `onClick`.\n- **theme** *(string, opzionale)*: Imposta lo stile del pulsante. I valori sono documentati [qui](?path=/docs/foundations-constants--docs). Pu√≤ essere:\n  - `THEME.PRIMARY`\n  - `THEME.SECONDARY`\n  - `THEME.TERTIARY`\n- **size** *(string, opzionale)*: Imposta la dimensione del pulsante. I valori sono documentati [qui](?path=/docs/foundations-constants--docs). Pu√≤ essere:\n  - `SIZES.S`\n  - `SIZES.M`\n  - `SIZES.L`\n- **tag** *(string, opzionale)*: Specifica il tag HTML del pulsante (`button` o `a`).\n- **underline** *(boolean, opzionale)*: Imposta l'underline sul bottone.\n- **uppercase** *(boolean, opzionale)*: Imposta l'uppercase sul testo del bottone.\n- **status** *(string, opzionale)*: Imposta lo stato del pulsante. I valori sono documentati [qui](?path=/docs/foundations-constants--docs). Pu√≤ essere:\n  - `STATUS.SUCCESS`\n  - `STATUS.WARNING`\n  - `STATUS.DANGER`\n  - `STATUS.INFO`\n        "}}}},t={args:{children:"Primary Button",theme:e.PRIMARY}},n={args:{children:"Secondary Button",theme:e.SECONDARY}},i={args:{children:"Tertiary Button",theme:e.TERTIARY}},o={args:{iconRight:"faAngleDown"}};o.parameters={docs:{description:{story:"Il bottone senza `children` richiede un' `aria-label` e un'`iconLeft` o `iconRight`"}}};const a={args:{children:"Is Loading Button",isLoading:!0}};var r,c,l;t.parameters={...t.parameters,docs:{...(r=t.parameters)==null?void 0:r.docs,source:{originalSource:`{
  args: {
    children: "Primary Button",
    theme: THEME.PRIMARY
  }
}`,...(l=(c=t.parameters)==null?void 0:c.docs)==null?void 0:l.source}}};var d,p,u;n.parameters={...n.parameters,docs:{...(d=n.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {
    children: "Secondary Button",
    theme: THEME.SECONDARY
  }
}`,...(u=(p=n.parameters)==null?void 0:p.docs)==null?void 0:u.source}}};var m,g,I;i.parameters={...i.parameters,docs:{...(m=i.parameters)==null?void 0:m.docs,source:{originalSource:`{
  args: {
    children: "Tertiary Button",
    theme: THEME.TERTIARY
  }
}`,...(I=(g=i.parameters)==null?void 0:g.docs)==null?void 0:I.source}}};var S,h,T;o.parameters={...o.parameters,docs:{...(S=o.parameters)==null?void 0:S.docs,source:{originalSource:`{
  args: {
    iconRight: "faAngleDown"
  }
}`,...(T=(h=o.parameters)==null?void 0:h.docs)==null?void 0:T.source}}};var R,b,E;a.parameters={...a.parameters,docs:{...(R=a.parameters)==null?void 0:R.docs,source:{originalSource:`{
  args: {
    children: "Is Loading Button",
    isLoading: true
  }
}`,...(E=(b=a.parameters)==null?void 0:b.docs)==null?void 0:E.source}}};const B=["Primary","Secondary","Tertiary","isOnlyIcon","Loading"];export{a as Loading,t as Primary,n as Secondary,i as Tertiary,B as __namedExportsOrder,M as default,o as isOnlyIcon};
